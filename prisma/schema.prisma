// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  description     String   
  published Boolean     @default(false)
  userId    String   
  picturePath String?
  likes     Like[]     
  user      User        @relation("posts", fields: [userId], references: [id], onDelete: Cascade)
  userSave      SavedPostsOnUser[]       
  comments  Comment[] 
  userShare SharedPostsOnUser[]  
}
model SavedPostsOnUser {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String // relation scalar field (used in the `@relation` attribute above)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String // relation scalar field (used in the `@relation` attribute above)
  savedAt DateTime @default(now())

  @@id([postId, userId])
}
model SharedPostsOnUser {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String // relation scalar field (used in the `@relation` attribute above)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String // relation scalar field (used in the `@relation` attribute above)
  sharedAt DateTime @default(now())

  @@id([postId, userId])
}
model Comment {
  id        String      @id @default(cuid())
  postId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  text     String   
  published Boolean     @default(false)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  
}

model Like {
  id        String      @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime    @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
}



model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  picturePath   String
  email         String   @unique
  emailVerified DateTime?
  hashedPassword String
  location      String
  occupation    String
  viewedProfile Int
  impressions   Int
  likes         Like[]
  comments      Comment[]
  posts         Post[] @relation("posts")
  followedBy Follows[]  @relation("following")
  following  Follows[]  @relation("follower")
  createdAt DateTime    @default(now())
  savedPosts SavedPostsOnUser[] 
  sharedPosts SharedPostsOnUser[]

}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@id([followerId, followingId])
 
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}